/** Generated by YAKINDU Statechart Tools code generator. */
package fr.univcotedazur.kairos.webots.polycreate.controler;

import com.yakindu.core.IStatemachine;
import com.yakindu.core.rx.Observable;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

public class RobotStatemachine implements IStatemachine {
	public enum State {
		MAIN_REGION_MOVING,
		MAIN_REGION_TURNING_,
		$NULLSTATE$
	};
	
	private final State[] stateVector = new State[1];
	
	private BlockingQueue<Runnable> inEventQueue = new LinkedBlockingQueue<Runnable>();
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		synchronized(RobotStatemachine.this) {
			return isExecuting;
		}
	}
	
	protected void setIsExecuting(boolean value) {
		synchronized(RobotStatemachine.this) {
			this.isExecuting = value;
		}
	}
	public RobotStatemachine() {
		for (int i = 0; i < 1; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		
		setAngle(0.0);
		
		isExecuting = false;
	}
	
	public synchronized void enter() {
		
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		
		enterSequence_main_region_default();
		isExecuting = false;
	}
	
	public synchronized void exit() {
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		
		exitSequence_main_region();
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public synchronized boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public synchronized boolean isFinal() {
		return false;
	}
	private void clearInEvents() {
		front = false;
		frontL = false;
		frontR = false;
		back = false;
		lTS = false;
		rTS = false;
	}
	
	private void microStep() {
		switch (stateVector[0]) {
		case MAIN_REGION_MOVING:
			main_region_Moving_react(-1);
			break;
		case MAIN_REGION_TURNING_:
			main_region_Turning__react(-1);
			break;
		default:
			break;
		}
	}
	
	private void runCycle() {
		
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		
		nextEvent();
		do { 
			microStep();
			
			clearInEvents();
			
			nextEvent();
		} while ((((((front || frontL) || frontR) || back) || lTS) || rTS));
		
		isExecuting = false;
	}
	
	protected void nextEvent() {
		if(!inEventQueue.isEmpty()) {
			inEventQueue.poll().run();
			return;
		}
	}
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public synchronized boolean isStateActive(State state) {
	
		switch (state) {
		case MAIN_REGION_MOVING:
			return stateVector[0] == State.MAIN_REGION_MOVING;
		case MAIN_REGION_TURNING_:
			return stateVector[0] == State.MAIN_REGION_TURNING_;
		default:
			return false;
		}
	}
	
	
	private boolean front;
	
	
	public void raiseFront() {
		synchronized(RobotStatemachine.this) {
			inEventQueue.add(() -> {
				front = true;
			});
			runCycle();
		}
	}
	
	private boolean frontL;
	
	
	public void raiseFrontL() {
		synchronized(RobotStatemachine.this) {
			inEventQueue.add(() -> {
				frontL = true;
			});
			runCycle();
		}
	}
	
	private boolean frontR;
	
	
	public void raiseFrontR() {
		synchronized(RobotStatemachine.this) {
			inEventQueue.add(() -> {
				frontR = true;
			});
			runCycle();
		}
	}
	
	private boolean back;
	
	
	public void raiseBack() {
		synchronized(RobotStatemachine.this) {
			inEventQueue.add(() -> {
				back = true;
			});
			runCycle();
		}
	}
	
	private boolean lTS;
	
	
	public void raiseLTS() {
		synchronized(RobotStatemachine.this) {
			inEventQueue.add(() -> {
				lTS = true;
			});
			runCycle();
		}
	}
	
	private boolean rTS;
	
	
	public void raiseRTS() {
		synchronized(RobotStatemachine.this) {
			inEventQueue.add(() -> {
				rTS = true;
			});
			runCycle();
		}
	}
	
	private boolean turn;
	
	
	protected void raiseTurn() {
		synchronized(RobotStatemachine.this) {
			turn = true;
			turnObservable.next(null);
		}
	}
	
	private Observable<Void> turnObservable = new Observable<Void>();
	
	public Observable<Void> getTurn() {
		return turnObservable;
	}
	
	private boolean goForward;
	
	
	protected void raiseGoForward() {
		synchronized(RobotStatemachine.this) {
			goForward = true;
			goForwardObservable.next(null);
		}
	}
	
	private Observable<Void> goForwardObservable = new Observable<Void>();
	
	public Observable<Void> getGoForward() {
		return goForwardObservable;
	}
	
	private boolean goBackward;
	
	
	protected void raiseGoBackward() {
		synchronized(RobotStatemachine.this) {
			goBackward = true;
			goBackwardObservable.next(null);
		}
	}
	
	private Observable<Void> goBackwardObservable = new Observable<Void>();
	
	public Observable<Void> getGoBackward() {
		return goBackwardObservable;
	}
	
	private boolean openGripper;
	
	
	protected void raiseOpenGripper() {
		synchronized(RobotStatemachine.this) {
			openGripper = true;
			openGripperObservable.next(null);
		}
	}
	
	private Observable<Void> openGripperObservable = new Observable<Void>();
	
	public Observable<Void> getOpenGripper() {
		return openGripperObservable;
	}
	
	private boolean closeGripper;
	
	
	protected void raiseCloseGripper() {
		synchronized(RobotStatemachine.this) {
			closeGripper = true;
			closeGripperObservable.next(null);
		}
	}
	
	private Observable<Void> closeGripperObservable = new Observable<Void>();
	
	public Observable<Void> getCloseGripper() {
		return closeGripperObservable;
	}
	
	private double angle;
	
	public synchronized double getAngle() {
		synchronized(RobotStatemachine.this) {
			return angle;
		}
	}
	
	public void setAngle(double value) {
		synchronized(RobotStatemachine.this) {
			this.angle = value;
		}
	}
	
	/* 'default' enter sequence for state Moving */
	private void enterSequence_main_region_Moving_default() {
		stateVector[0] = State.MAIN_REGION_MOVING;
	}
	
	/* 'default' enter sequence for state Turning  */
	private void enterSequence_main_region_Turning__default() {
		stateVector[0] = State.MAIN_REGION_TURNING_;
	}
	
	/* 'default' enter sequence for region main region */
	private void enterSequence_main_region_default() {
		react_main_region__entry_Default();
	}
	
	/* Default exit sequence for state Moving */
	private void exitSequence_main_region_Moving() {
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state Turning  */
	private void exitSequence_main_region_Turning_() {
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for region main region */
	private void exitSequence_main_region() {
		switch (stateVector[0]) {
		case MAIN_REGION_MOVING:
			exitSequence_main_region_Moving();
			break;
		case MAIN_REGION_TURNING_:
			exitSequence_main_region_Turning_();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__entry_Default() {
		enterSequence_main_region_Moving_default();
	}
	
	private long react(long transitioned_before) {
		return transitioned_before;
	}
	
	private long main_region_Moving_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
			if (frontL) {
				exitSequence_main_region_Moving();
				enterSequence_main_region_Turning__default();
				react(0);
				
				transitioned_after = 0;
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Turning__react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
			if (front) {
				exitSequence_main_region_Turning_();
				enterSequence_main_region_Moving_default();
				react(0);
				
				transitioned_after = 0;
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after;
	}
	
}
